// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/order"
	"github.com/mikestefanello/pagoda/ent/ordervalidation"
)

// OrderValidationCreate is the builder for creating a OrderValidation entity.
type OrderValidationCreate struct {
	config
	mutation *OrderValidationMutation
	hooks    []Hook
}

// SetJessionID sets the "jession_id" field.
func (ovc *OrderValidationCreate) SetJessionID(s string) *OrderValidationCreate {
	ovc.mutation.SetJessionID(s)
	return ovc
}

// SetCaptchaImage sets the "captcha_image" field.
func (ovc *OrderValidationCreate) SetCaptchaImage(s string) *OrderValidationCreate {
	ovc.mutation.SetCaptchaImage(s)
	return ovc
}

// SetCookies sets the "cookies" field.
func (ovc *OrderValidationCreate) SetCookies(s string) *OrderValidationCreate {
	ovc.mutation.SetCookies(s)
	return ovc
}

// SetCreatedAt sets the "created_at" field.
func (ovc *OrderValidationCreate) SetCreatedAt(t time.Time) *OrderValidationCreate {
	ovc.mutation.SetCreatedAt(t)
	return ovc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ovc *OrderValidationCreate) SetNillableCreatedAt(t *time.Time) *OrderValidationCreate {
	if t != nil {
		ovc.SetCreatedAt(*t)
	}
	return ovc
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ovc *OrderValidationCreate) SetOrderID(id int) *OrderValidationCreate {
	ovc.mutation.SetOrderID(id)
	return ovc
}

// SetOrder sets the "order" edge to the Order entity.
func (ovc *OrderValidationCreate) SetOrder(o *Order) *OrderValidationCreate {
	return ovc.SetOrderID(o.ID)
}

// Mutation returns the OrderValidationMutation object of the builder.
func (ovc *OrderValidationCreate) Mutation() *OrderValidationMutation {
	return ovc.mutation
}

// Save creates the OrderValidation in the database.
func (ovc *OrderValidationCreate) Save(ctx context.Context) (*OrderValidation, error) {
	ovc.defaults()
	return withHooks(ctx, ovc.sqlSave, ovc.mutation, ovc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ovc *OrderValidationCreate) SaveX(ctx context.Context) *OrderValidation {
	v, err := ovc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovc *OrderValidationCreate) Exec(ctx context.Context) error {
	_, err := ovc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovc *OrderValidationCreate) ExecX(ctx context.Context) {
	if err := ovc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ovc *OrderValidationCreate) defaults() {
	if _, ok := ovc.mutation.CreatedAt(); !ok {
		v := ordervalidation.DefaultCreatedAt()
		ovc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ovc *OrderValidationCreate) check() error {
	if _, ok := ovc.mutation.JessionID(); !ok {
		return &ValidationError{Name: "jession_id", err: errors.New(`ent: missing required field "OrderValidation.jession_id"`)}
	}
	if v, ok := ovc.mutation.JessionID(); ok {
		if err := ordervalidation.JessionIDValidator(v); err != nil {
			return &ValidationError{Name: "jession_id", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.jession_id": %w`, err)}
		}
	}
	if _, ok := ovc.mutation.CaptchaImage(); !ok {
		return &ValidationError{Name: "captcha_image", err: errors.New(`ent: missing required field "OrderValidation.captcha_image"`)}
	}
	if v, ok := ovc.mutation.CaptchaImage(); ok {
		if err := ordervalidation.CaptchaImageValidator(v); err != nil {
			return &ValidationError{Name: "captcha_image", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.captcha_image": %w`, err)}
		}
	}
	if _, ok := ovc.mutation.Cookies(); !ok {
		return &ValidationError{Name: "cookies", err: errors.New(`ent: missing required field "OrderValidation.cookies"`)}
	}
	if v, ok := ovc.mutation.Cookies(); ok {
		if err := ordervalidation.CookiesValidator(v); err != nil {
			return &ValidationError{Name: "cookies", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.cookies": %w`, err)}
		}
	}
	if _, ok := ovc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderValidation.created_at"`)}
	}
	if _, ok := ovc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderValidation.order"`)}
	}
	return nil
}

func (ovc *OrderValidationCreate) sqlSave(ctx context.Context) (*OrderValidation, error) {
	if err := ovc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ovc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ovc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ovc.mutation.id = &_node.ID
	ovc.mutation.done = true
	return _node, nil
}

func (ovc *OrderValidationCreate) createSpec() (*OrderValidation, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderValidation{config: ovc.config}
		_spec = sqlgraph.NewCreateSpec(ordervalidation.Table, sqlgraph.NewFieldSpec(ordervalidation.FieldID, field.TypeInt))
	)
	if value, ok := ovc.mutation.JessionID(); ok {
		_spec.SetField(ordervalidation.FieldJessionID, field.TypeString, value)
		_node.JessionID = value
	}
	if value, ok := ovc.mutation.CaptchaImage(); ok {
		_spec.SetField(ordervalidation.FieldCaptchaImage, field.TypeString, value)
		_node.CaptchaImage = value
	}
	if value, ok := ovc.mutation.Cookies(); ok {
		_spec.SetField(ordervalidation.FieldCookies, field.TypeString, value)
		_node.Cookies = value
	}
	if value, ok := ovc.mutation.CreatedAt(); ok {
		_spec.SetField(ordervalidation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ovc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordervalidation.OrderTable,
			Columns: []string{ordervalidation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_validation_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderValidationCreateBulk is the builder for creating many OrderValidation entities in bulk.
type OrderValidationCreateBulk struct {
	config
	err      error
	builders []*OrderValidationCreate
}

// Save creates the OrderValidation entities in the database.
func (ovcb *OrderValidationCreateBulk) Save(ctx context.Context) ([]*OrderValidation, error) {
	if ovcb.err != nil {
		return nil, ovcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ovcb.builders))
	nodes := make([]*OrderValidation, len(ovcb.builders))
	mutators := make([]Mutator, len(ovcb.builders))
	for i := range ovcb.builders {
		func(i int, root context.Context) {
			builder := ovcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderValidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ovcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ovcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ovcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ovcb *OrderValidationCreateBulk) SaveX(ctx context.Context) []*OrderValidation {
	v, err := ovcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovcb *OrderValidationCreateBulk) Exec(ctx context.Context) error {
	_, err := ovcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovcb *OrderValidationCreateBulk) ExecX(ctx context.Context) {
	if err := ovcb.Exec(ctx); err != nil {
		panic(err)
	}
}
