// Code generated by ent, DO NOT EDIT.

package ordervalidation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ordervalidation type in the database.
	Label = "order_validation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJessionID holds the string denoting the jession_id field in the database.
	FieldJessionID = "jession_id"
	// FieldCaptchaImage holds the string denoting the captcha_image field in the database.
	FieldCaptchaImage = "captcha_image"
	// FieldCookies holds the string denoting the cookies field in the database.
	FieldCookies = "cookies"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the ordervalidation in the database.
	Table = "order_validations"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_validations"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_validation_order"
)

// Columns holds all SQL columns for ordervalidation fields.
var Columns = []string{
	FieldID,
	FieldJessionID,
	FieldCaptchaImage,
	FieldCookies,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_validations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_validation_order",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// JessionIDValidator is a validator for the "jession_id" field. It is called by the builders before save.
	JessionIDValidator func(string) error
	// CaptchaImageValidator is a validator for the "captcha_image" field. It is called by the builders before save.
	CaptchaImageValidator func(string) error
	// CookiesValidator is a validator for the "cookies" field. It is called by the builders before save.
	CookiesValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the OrderValidation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJessionID orders the results by the jession_id field.
func ByJessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJessionID, opts...).ToFunc()
}

// ByCaptchaImage orders the results by the captcha_image field.
func ByCaptchaImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptchaImage, opts...).ToFunc()
}

// ByCookies orders the results by the cookies field.
func ByCookies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCookies, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
