// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/order"
	"github.com/mikestefanello/pagoda/ent/ordervalidation"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// OrderValidationUpdate is the builder for updating OrderValidation entities.
type OrderValidationUpdate struct {
	config
	hooks    []Hook
	mutation *OrderValidationMutation
}

// Where appends a list predicates to the OrderValidationUpdate builder.
func (ovu *OrderValidationUpdate) Where(ps ...predicate.OrderValidation) *OrderValidationUpdate {
	ovu.mutation.Where(ps...)
	return ovu
}

// SetJessionID sets the "jession_id" field.
func (ovu *OrderValidationUpdate) SetJessionID(s string) *OrderValidationUpdate {
	ovu.mutation.SetJessionID(s)
	return ovu
}

// SetNillableJessionID sets the "jession_id" field if the given value is not nil.
func (ovu *OrderValidationUpdate) SetNillableJessionID(s *string) *OrderValidationUpdate {
	if s != nil {
		ovu.SetJessionID(*s)
	}
	return ovu
}

// SetCaptchaImage sets the "captcha_image" field.
func (ovu *OrderValidationUpdate) SetCaptchaImage(s string) *OrderValidationUpdate {
	ovu.mutation.SetCaptchaImage(s)
	return ovu
}

// SetNillableCaptchaImage sets the "captcha_image" field if the given value is not nil.
func (ovu *OrderValidationUpdate) SetNillableCaptchaImage(s *string) *OrderValidationUpdate {
	if s != nil {
		ovu.SetCaptchaImage(*s)
	}
	return ovu
}

// SetCookies sets the "cookies" field.
func (ovu *OrderValidationUpdate) SetCookies(s string) *OrderValidationUpdate {
	ovu.mutation.SetCookies(s)
	return ovu
}

// SetNillableCookies sets the "cookies" field if the given value is not nil.
func (ovu *OrderValidationUpdate) SetNillableCookies(s *string) *OrderValidationUpdate {
	if s != nil {
		ovu.SetCookies(*s)
	}
	return ovu
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ovu *OrderValidationUpdate) SetOrderID(id int) *OrderValidationUpdate {
	ovu.mutation.SetOrderID(id)
	return ovu
}

// SetOrder sets the "order" edge to the Order entity.
func (ovu *OrderValidationUpdate) SetOrder(o *Order) *OrderValidationUpdate {
	return ovu.SetOrderID(o.ID)
}

// Mutation returns the OrderValidationMutation object of the builder.
func (ovu *OrderValidationUpdate) Mutation() *OrderValidationMutation {
	return ovu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (ovu *OrderValidationUpdate) ClearOrder() *OrderValidationUpdate {
	ovu.mutation.ClearOrder()
	return ovu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ovu *OrderValidationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ovu.sqlSave, ovu.mutation, ovu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovu *OrderValidationUpdate) SaveX(ctx context.Context) int {
	affected, err := ovu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ovu *OrderValidationUpdate) Exec(ctx context.Context) error {
	_, err := ovu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovu *OrderValidationUpdate) ExecX(ctx context.Context) {
	if err := ovu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ovu *OrderValidationUpdate) check() error {
	if v, ok := ovu.mutation.JessionID(); ok {
		if err := ordervalidation.JessionIDValidator(v); err != nil {
			return &ValidationError{Name: "jession_id", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.jession_id": %w`, err)}
		}
	}
	if v, ok := ovu.mutation.CaptchaImage(); ok {
		if err := ordervalidation.CaptchaImageValidator(v); err != nil {
			return &ValidationError{Name: "captcha_image", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.captcha_image": %w`, err)}
		}
	}
	if v, ok := ovu.mutation.Cookies(); ok {
		if err := ordervalidation.CookiesValidator(v); err != nil {
			return &ValidationError{Name: "cookies", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.cookies": %w`, err)}
		}
	}
	if _, ok := ovu.mutation.OrderID(); ovu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderValidation.order"`)
	}
	return nil
}

func (ovu *OrderValidationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ovu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordervalidation.Table, ordervalidation.Columns, sqlgraph.NewFieldSpec(ordervalidation.FieldID, field.TypeInt))
	if ps := ovu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovu.mutation.JessionID(); ok {
		_spec.SetField(ordervalidation.FieldJessionID, field.TypeString, value)
	}
	if value, ok := ovu.mutation.CaptchaImage(); ok {
		_spec.SetField(ordervalidation.FieldCaptchaImage, field.TypeString, value)
	}
	if value, ok := ovu.mutation.Cookies(); ok {
		_spec.SetField(ordervalidation.FieldCookies, field.TypeString, value)
	}
	if ovu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordervalidation.OrderTable,
			Columns: []string{ordervalidation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordervalidation.OrderTable,
			Columns: []string{ordervalidation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ovu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordervalidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ovu.mutation.done = true
	return n, nil
}

// OrderValidationUpdateOne is the builder for updating a single OrderValidation entity.
type OrderValidationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderValidationMutation
}

// SetJessionID sets the "jession_id" field.
func (ovuo *OrderValidationUpdateOne) SetJessionID(s string) *OrderValidationUpdateOne {
	ovuo.mutation.SetJessionID(s)
	return ovuo
}

// SetNillableJessionID sets the "jession_id" field if the given value is not nil.
func (ovuo *OrderValidationUpdateOne) SetNillableJessionID(s *string) *OrderValidationUpdateOne {
	if s != nil {
		ovuo.SetJessionID(*s)
	}
	return ovuo
}

// SetCaptchaImage sets the "captcha_image" field.
func (ovuo *OrderValidationUpdateOne) SetCaptchaImage(s string) *OrderValidationUpdateOne {
	ovuo.mutation.SetCaptchaImage(s)
	return ovuo
}

// SetNillableCaptchaImage sets the "captcha_image" field if the given value is not nil.
func (ovuo *OrderValidationUpdateOne) SetNillableCaptchaImage(s *string) *OrderValidationUpdateOne {
	if s != nil {
		ovuo.SetCaptchaImage(*s)
	}
	return ovuo
}

// SetCookies sets the "cookies" field.
func (ovuo *OrderValidationUpdateOne) SetCookies(s string) *OrderValidationUpdateOne {
	ovuo.mutation.SetCookies(s)
	return ovuo
}

// SetNillableCookies sets the "cookies" field if the given value is not nil.
func (ovuo *OrderValidationUpdateOne) SetNillableCookies(s *string) *OrderValidationUpdateOne {
	if s != nil {
		ovuo.SetCookies(*s)
	}
	return ovuo
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ovuo *OrderValidationUpdateOne) SetOrderID(id int) *OrderValidationUpdateOne {
	ovuo.mutation.SetOrderID(id)
	return ovuo
}

// SetOrder sets the "order" edge to the Order entity.
func (ovuo *OrderValidationUpdateOne) SetOrder(o *Order) *OrderValidationUpdateOne {
	return ovuo.SetOrderID(o.ID)
}

// Mutation returns the OrderValidationMutation object of the builder.
func (ovuo *OrderValidationUpdateOne) Mutation() *OrderValidationMutation {
	return ovuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (ovuo *OrderValidationUpdateOne) ClearOrder() *OrderValidationUpdateOne {
	ovuo.mutation.ClearOrder()
	return ovuo
}

// Where appends a list predicates to the OrderValidationUpdate builder.
func (ovuo *OrderValidationUpdateOne) Where(ps ...predicate.OrderValidation) *OrderValidationUpdateOne {
	ovuo.mutation.Where(ps...)
	return ovuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ovuo *OrderValidationUpdateOne) Select(field string, fields ...string) *OrderValidationUpdateOne {
	ovuo.fields = append([]string{field}, fields...)
	return ovuo
}

// Save executes the query and returns the updated OrderValidation entity.
func (ovuo *OrderValidationUpdateOne) Save(ctx context.Context) (*OrderValidation, error) {
	return withHooks(ctx, ovuo.sqlSave, ovuo.mutation, ovuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovuo *OrderValidationUpdateOne) SaveX(ctx context.Context) *OrderValidation {
	node, err := ovuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ovuo *OrderValidationUpdateOne) Exec(ctx context.Context) error {
	_, err := ovuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovuo *OrderValidationUpdateOne) ExecX(ctx context.Context) {
	if err := ovuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ovuo *OrderValidationUpdateOne) check() error {
	if v, ok := ovuo.mutation.JessionID(); ok {
		if err := ordervalidation.JessionIDValidator(v); err != nil {
			return &ValidationError{Name: "jession_id", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.jession_id": %w`, err)}
		}
	}
	if v, ok := ovuo.mutation.CaptchaImage(); ok {
		if err := ordervalidation.CaptchaImageValidator(v); err != nil {
			return &ValidationError{Name: "captcha_image", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.captcha_image": %w`, err)}
		}
	}
	if v, ok := ovuo.mutation.Cookies(); ok {
		if err := ordervalidation.CookiesValidator(v); err != nil {
			return &ValidationError{Name: "cookies", err: fmt.Errorf(`ent: validator failed for field "OrderValidation.cookies": %w`, err)}
		}
	}
	if _, ok := ovuo.mutation.OrderID(); ovuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderValidation.order"`)
	}
	return nil
}

func (ovuo *OrderValidationUpdateOne) sqlSave(ctx context.Context) (_node *OrderValidation, err error) {
	if err := ovuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordervalidation.Table, ordervalidation.Columns, sqlgraph.NewFieldSpec(ordervalidation.FieldID, field.TypeInt))
	id, ok := ovuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderValidation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ovuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordervalidation.FieldID)
		for _, f := range fields {
			if !ordervalidation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordervalidation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ovuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovuo.mutation.JessionID(); ok {
		_spec.SetField(ordervalidation.FieldJessionID, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.CaptchaImage(); ok {
		_spec.SetField(ordervalidation.FieldCaptchaImage, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.Cookies(); ok {
		_spec.SetField(ordervalidation.FieldCookies, field.TypeString, value)
	}
	if ovuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordervalidation.OrderTable,
			Columns: []string{ordervalidation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordervalidation.OrderTable,
			Columns: []string{ordervalidation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderValidation{config: ovuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ovuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordervalidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ovuo.mutation.done = true
	return _node, nil
}
